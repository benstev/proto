// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hagw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HagwClient is the client API for Hagw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HagwClient interface {
	State(ctx context.Context, in *StateReq, opts ...grpc.CallOption) (*StateResp, error)
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Hagw_SubscribeClient, error)
	CallService(ctx context.Context, in *CallServiceReq, opts ...grpc.CallOption) (*CallServiceResp, error)
	FireEvent(ctx context.Context, in *FireEventReq, opts ...grpc.CallOption) (*FireEventResp, error)
}

type hagwClient struct {
	cc grpc.ClientConnInterface
}

func NewHagwClient(cc grpc.ClientConnInterface) HagwClient {
	return &hagwClient{cc}
}

func (c *hagwClient) State(ctx context.Context, in *StateReq, opts ...grpc.CallOption) (*StateResp, error) {
	out := new(StateResp)
	err := c.cc.Invoke(ctx, "/hagw.Hagw/state", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hagwClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Hagw_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hagw_ServiceDesc.Streams[0], "/hagw.Hagw/subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &hagwSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hagw_SubscribeClient interface {
	Recv() (*HAState, error)
	grpc.ClientStream
}

type hagwSubscribeClient struct {
	grpc.ClientStream
}

func (x *hagwSubscribeClient) Recv() (*HAState, error) {
	m := new(HAState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hagwClient) CallService(ctx context.Context, in *CallServiceReq, opts ...grpc.CallOption) (*CallServiceResp, error) {
	out := new(CallServiceResp)
	err := c.cc.Invoke(ctx, "/hagw.Hagw/callService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hagwClient) FireEvent(ctx context.Context, in *FireEventReq, opts ...grpc.CallOption) (*FireEventResp, error) {
	out := new(FireEventResp)
	err := c.cc.Invoke(ctx, "/hagw.Hagw/fireEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HagwServer is the server API for Hagw service.
// All implementations must embed UnimplementedHagwServer
// for forward compatibility
type HagwServer interface {
	State(context.Context, *StateReq) (*StateResp, error)
	Subscribe(*SubscribeReq, Hagw_SubscribeServer) error
	CallService(context.Context, *CallServiceReq) (*CallServiceResp, error)
	FireEvent(context.Context, *FireEventReq) (*FireEventResp, error)
	mustEmbedUnimplementedHagwServer()
}

// UnimplementedHagwServer must be embedded to have forward compatible implementations.
type UnimplementedHagwServer struct {
}

func (UnimplementedHagwServer) State(context.Context, *StateReq) (*StateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedHagwServer) Subscribe(*SubscribeReq, Hagw_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedHagwServer) CallService(context.Context, *CallServiceReq) (*CallServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallService not implemented")
}
func (UnimplementedHagwServer) FireEvent(context.Context, *FireEventReq) (*FireEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireEvent not implemented")
}
func (UnimplementedHagwServer) mustEmbedUnimplementedHagwServer() {}

// UnsafeHagwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HagwServer will
// result in compilation errors.
type UnsafeHagwServer interface {
	mustEmbedUnimplementedHagwServer()
}

func RegisterHagwServer(s grpc.ServiceRegistrar, srv HagwServer) {
	s.RegisterService(&Hagw_ServiceDesc, srv)
}

func _Hagw_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HagwServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hagw.Hagw/state",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HagwServer).State(ctx, req.(*StateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hagw_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HagwServer).Subscribe(m, &hagwSubscribeServer{stream})
}

type Hagw_SubscribeServer interface {
	Send(*HAState) error
	grpc.ServerStream
}

type hagwSubscribeServer struct {
	grpc.ServerStream
}

func (x *hagwSubscribeServer) Send(m *HAState) error {
	return x.ServerStream.SendMsg(m)
}

func _Hagw_CallService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HagwServer).CallService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hagw.Hagw/callService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HagwServer).CallService(ctx, req.(*CallServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hagw_FireEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HagwServer).FireEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hagw.Hagw/fireEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HagwServer).FireEvent(ctx, req.(*FireEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Hagw_ServiceDesc is the grpc.ServiceDesc for Hagw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hagw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hagw.Hagw",
	HandlerType: (*HagwServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "state",
			Handler:    _Hagw_State_Handler,
		},
		{
			MethodName: "callService",
			Handler:    _Hagw_CallService_Handler,
		},
		{
			MethodName: "fireEvent",
			Handler:    _Hagw_FireEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribe",
			Handler:       _Hagw_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hagw.proto",
}
